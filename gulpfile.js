const {src, dest, watch, parallel, series} = require('gulp');

const scss = require('gulp-sass')(require('sass'));
const concat = require('gulp-concat');
const uglify = require('gulp-uglify-es').default;
const browserSync = require('browser-sync').create();
const autoprefixer = require('gulp-autoprefixer');
const sourcemaps = require('gulp-sourcemaps');
const clean = require('gulp-clean');
const mode = require('gulp-mode')({modes: ['prod', 'dev'], default: 'dev'});
const svgSprite = require('gulp-svg-sprite');

const gulpConfig = require('./gulpConfig.json');
const config = gulpConfig.config;
const appPath = config.path.app;
const distPath = config.path.dist;

const path = {
  app: {
    html:   config.src['html'],
    css:    config.src['styles'],
    js:     config.src['scripts'],
    img:    config.src['images'],
    sprite: config.src['sprite'],
    fonts:  config.src['fonts']
  },
  watch: {
    html:   config.watch['html'],
    css:    config.watch['styles'],
    js:     config.watch['scripts'],
    img:    config.watch['images'],
    sprite: config.watch['sprite'],
    fonts:  config.watch['fonts']
  },
  build: {
    html:   config.dist['html'],
    css:    config.dist['styles'],
    js:     config.dist['scripts'],
    img:    config.dist['images'],
    sprite: config.dist['sprite'],
    fonts:  config.dist['fonts']
  },
  clean: './' + distPath
}

const html = () => {
  return src(path.app.html, {base: appPath})
    .pipe(dest(path.build.html))
    .pipe(mode.dev(browserSync.reload({stream: true})))
}

const styles = () => {
  return src(path.app.css, {base: appPath + 'scss/'})
    .pipe(mode.dev(sourcemaps.init({loadMaps: true})))
    .pipe(mode.prod(autoprefixer({ overrideBrowserslist: ['last 10 version'], browsers: configBrowser})))
    .pipe(concat('style.min.css'))
    .pipe(mode.prod(scss({ outputStyle: 'compressed' })))
    .pipe(mode.dev(scss()))
    .pipe(mode.dev(sourcemaps.write('./')))
    .pipe(dest(path.build.css))
    .pipe(mode.dev(browserSync.stream()))
}

const configBrowser = [
  'Chrome >= 20',
  'Firefox >= 24',
  'Opera >= 12',
  'Safari >= 6',
  'Explorer >= 11',
  'iOS >= 6',
  'Android >= 4'
]

const scripts = () => {
  return src(path.app.js, {base: appPath + 'js/'})
    .pipe(mode.dev(sourcemaps.init({loadMaps: true})))
    .pipe(concat('main.min.js'))
    .pipe(mode.prod(uglify()))
    .pipe(mode.dev(sourcemaps.write('./')))
    .pipe(dest(path.build.js))
    .pipe(mode.dev(browserSync.stream()))
}

const images = () => {
  return src(path.app.img, {base: appPath + 'images/'})
    .pipe(dest(path.build.img))
}

const sprite = () => {
  return src(path.app.sprite, {base: appPath + 'images/sprite/'})
    .pipe(svgSprite(configSprite))
    .pipe(dest(path.build.img))
}

const configSprite = {
  mode: {
    css: {
      dest: './',
      prefix: '@mixin sprite-',
      bust : true,
      render: {
        scss: {
          dest: '../../' + appPath + 'scss/utils/_sprite_autoGenerated.scss'
        }
      },
      dimensions: true,
      sprite: '../images/sprite/sprite.svg',
      layout: 'packed',
      mixin: 'spriteBgUrl'
    }
  }
}

const fonts = () => {
  return src(path.app.fonts, {base: appPath + 'fonts/'})
    .pipe(dest(path.build.fonts))
}

const browsersync = () => {
  browserSync.init({
    // proxy: "localhost.dev" for PHP [remove option server]
    server: {
      baseDir: 'dist/'
    }
  })
}

const watchFiles = () => {
  watch(path.watch.html,   html)
  watch(path.watch.css,    styles)
  watch(path.watch.js,     scripts)
  watch(path.watch.img,    images)
  watch(path.watch.sprite, series(cleanSprite, sprite))
  watch(path.watch.fonts,  fonts)
}

const cleanSprite = () => {
  return src(path.build.sprite)
    .pipe(clean())
}

const cleanDist = () => {
  return src(path.clean)
    .pipe(clean())
}

const build = series(cleanDist, sprite, parallel(html, styles, scripts, images, fonts));
const watching = series(build, parallel(browsersync, watchFiles));

exports.html        = html;
exports.styles      = styles;
exports.scripts     = scripts;
exports.images      = images;
exports.sprite      = sprite;
exports.fonts       = fonts;
exports.browsersync = browsersync;
exports.cleanDist   = cleanDist;
exports.cleanSprite = cleanSprite;
exports.build       = build;
exports.watching    = watching;